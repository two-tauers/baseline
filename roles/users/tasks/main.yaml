---

# Make sure there are SSH keys for the users

- when: create_users == true
  block:

  # for some reason ansible's "stat" function does not find the keys
  # key_stat.results[i].stdout will be "0" if there is no key, otherwise "1"
  - name: Check if the ssh keys already exist locally
    delegate_to: localhost
    become: false
    changed_when: false
    ansible.builtin.shell: "ls -l {{ item.key_path }} | wc -l"
    with_items: "{{ users }}"
    register: key_stat

  - name: Generate missing ssh keys
    delegate_to: localhost
    ansible.builtin.command: |
      ssh-keygen -q -t ed25519 -f {{ item.item.key_path }} -C "" -N ""
    args:
      creates: "{{ item.item.key_path }}"
    with_items: "{{ key_stat.results }}"
    when: item.stdout == "0"

  - name: Ensure SSH keys permissions
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ item.key_path }}"
      owner: "{{ ansible_env.SUDO_UID }}"
    with_items: "{{ users }}"

  # Create the users

  - name: Create users
    ansible.builtin.user:
      name: "{{ item.username }}"
      state: present
      create_home: true
      shell: /bin/bash
    with_items: "{{ users }}"

  - name: Add users to sudoers
    become: true
    ansible.builtin.copy:
      dest: "/etc/sudoers.d/{{ item.username }}"
      content: "{{ item.username }}  ALL=(ALL)  NOPASSWD: ALL"
      mode: preserve
    with_items: "{{ users }}"
    when: item.sudoer

  - name: Copy public key to the hosts
    authorized_key:
      user: "{{ item.username }}"
      key: "{{ lookup('file', '{{ item.key_path }}.pub') }}"
      state: present
    with_items: "{{ users }}"

  - name: Disable password for the default user
    ansible.builtin.user:
      name: ubuntu
      password_lock: yes
